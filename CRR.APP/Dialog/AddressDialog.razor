@inject AddressService _AddressService
@inject DialogService DialogService
@inject IGeolocationService _gps
<RadzenStack>
    @if(IsEdit){
        <RadzenRow Gap="1rem">
            <RadzenRow Gap="0">
                <RadzenColumn Size="12">
                    @if(ShowExisting){
                        <RadzenFormField Text="Naam" Style="width: 100%;">
                            <RadzenDropDown TValue=Address Value=@AddressData Data=@ExistingAddresses Style="width: 100%; max-width: 400px;" Change="@(args => CheckPickedValues((Address)args))" TextProperty="@nameof(Address.Name)" AllowClear=true>
                                <ValueTemplate>
                                    <RadzenTextBox @bind-Value=@AddressData.Name Style="width:120%; height:120%; margin:-15px"/>
                                </ValueTemplate>
                            </RadzenDropDown>
                        </RadzenFormField>
                    }
                    else{
                        <RadzenFormField Text="Naam" Style="width: 100%;">
                            <RadzenTextBox @bind-Value=@AddressData.Name/>
                        </RadzenFormField>
                    }
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow Gap="0">
                <RadzenColumn Size="8">
                    <RadzenFormField Text="Straat" Style="width: 100%;">
                        <RadzenTextBox @bind-Value=@AddressData.Street/>
                    </RadzenFormField>
                </RadzenColumn>
                <RadzenColumn Size="4">
                    <RadzenFormField Text="Nummer" Style="width: 100%;">
                        <RadzenTextBox @bind-Value=@AddressData.Number/>
                    </RadzenFormField>
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow Gap="0">
                <RadzenColumn Size="12">
                    <RadzenFormField Text="Postcode" Style="width: 100%;">
                        <RadzenTextBox @bind-Value=@AddressData.ZipCode/>
                    </RadzenFormField>
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow Gap="0">
                <RadzenColumn Size="5">
                    <RadzenFormField Text="Latitude" Style="width: 100%;">
                        <RadzenNumeric @bind-Value=@AddressData.Latitude/>
                    </RadzenFormField>
                </RadzenColumn>
                <RadzenColumn Size="5">
                    <RadzenFormField Text="Longtitude" Style="width: 100%;">
                        <RadzenNumeric @bind-Value=@AddressData.Longitude/>
                    </RadzenFormField>
                </RadzenColumn>
                <RadzenColumn Size="2">
                    <RadzenButton Click=GetGPS Icon="add_location"/>
                </RadzenColumn>
            </RadzenRow>
        </RadzenRow>
    } else {
        @AddressData.Name
    }
    @if(IsEdit){
        <RadzenButton Text="Save" Click="@(() => SaveAddress(AddressData))" />
    } else {
        <RadzenButton Text="Edit" Click="@(() => IsEdit = true)" />
    }
</RadzenStack>

@code{
    private List<Address> ExistingAddresses {get; set;} = new List<Address>();
    [Parameter] public bool ShowExisting {get; set;} = false;
    public Address InitialValues { get; set;}
    [Parameter] public Address AddressData { get; set; } = new Address();
    private bool IsEdit {get; set;} = false;
    protected override async Task OnInitializedAsync(){
        InitialValues = AddressData;
        if(AddressData.Id == Guid.Empty)
            IsEdit = true;

        if(ShowExisting){
            ExistingAddresses = await _AddressService.GetAllAsync();
            ExistingAddresses = ExistingAddresses.OrderBy(A=>A.Name).ToList();
        }
        await base.OnInitializedAsync();
    }
    private async Task SaveAddress(Address address){
        bool Succeeded = false;

        Address Existingaddress = await _AddressService.GetByZIPAsync(address.ZipCode,address.Number);

        if(Existingaddress == null){
            Succeeded = await _AddressService.CreateAsync(address);
            if(Succeeded)
                DialogService.Close(address);
        } else {
            Existingaddress.Name = address.Name;
            Existingaddress.Number = address.Number;
            Existingaddress.Street = address.Street;
            Existingaddress.ZipCode = address.ZipCode;
            Existingaddress.Latitude = address.Latitude;
            Existingaddress.Longitude = address.Longitude;

            Succeeded = await _AddressService.SaveAsync(Existingaddress);
            
            if(Succeeded)
                DialogService.Close(Existingaddress);
        }
    }
    void CheckPickedValues(Address PickedAddress){
        if(PickedAddress != null){
            AddressData = PickedAddress;
        }
        else{
            AddressData = InitialValues;
        }
    }
    public void GetGPS(){
        _gps.GetCurrentPosition(this,nameof(OnPositionReceived));
    }
    [JSInvokable]
    public void OnPositionReceived(GeolocationPosition position)
    {
        if(AddressData.Longitude == 0 && AddressData.Latitude == 0){
            AddressData.Longitude = position.Coords.Longitude;
            AddressData.Latitude = position.Coords.Latitude;
        }
        StateHasChanged();
    }
}
