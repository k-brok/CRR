@inject AddressService _AddressService
@inject DialogService DialogService
 
<RadzenStack>
    @if(ShowExisting){
        <RadzenRow>
            <RadzenColumn Size="8">
                <RadzenDropDown @bind-Value=@PickedAddress Data=@ExistingAddresses TextProperty="@nameof(Address.Name)"/>
            </RadzenColumn>
            <RadzenColumn Size="4">
                <RadzenButton Click=UseExisiting Text="Use" ButtonStyle="ButtonStyle.Primary" />
            </RadzenColumn>
        </RadzenRow>
    }
    @if(IsEdit){
        <RadzenRow Gap="1rem">
            <RadzenRow Gap="0">
                <RadzenColumn Size="12">
                    <RadzenFormField Text="Naam" Style="width: 100%;">
                        <RadzenTextBox @bind-Value=@AddressData.Name/>
                    </RadzenFormField>
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow Gap="0">
                <RadzenColumn Size="8">
                    <RadzenFormField Text="Straat" Style="width: 100%;">
                        <RadzenTextBox @bind-Value=@AddressData.Street/>
                    </RadzenFormField>
                </RadzenColumn>
                <RadzenColumn Size="4">
                    <RadzenFormField Text="Nummer" Style="width: 100%;">
                        <RadzenTextBox @bind-Value=@AddressData.Number/>
                    </RadzenFormField>
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow Gap="0">
                <RadzenColumn Size="12">
                    <RadzenFormField Text="Postcode" Style="width: 100%;">
                        <RadzenTextBox @bind-Value=@AddressData.ZipCode/>
                    </RadzenFormField>
                </RadzenColumn>
            </RadzenRow>
        </RadzenRow>
    } else {
        @AddressData.Name
    }
    @if(IsEdit){
        <RadzenButton Text="Save" Click="@(() => SaveAddress(AddressData))" />
    } else {
        <RadzenButton Text="Edit" Click="@(() => IsEdit = true)" />
    }
</RadzenStack>

@code{
    private List<Address> ExistingAddresses {get; set;} = new List<Address>();
    [Parameter] public bool ShowExisting {get; set;} = false;
    public Address PickedAddress { get; set; }
    [Parameter] public Address AddressData { get; set; } = new Address();
    private bool IsEdit {get; set;} = false;
    protected override async Task OnInitializedAsync(){
        if(AddressData.Id == Guid.Empty)
            IsEdit = true;

        if(ShowExisting){
            ExistingAddresses = await _AddressService.GetAllAsync();
            ExistingAddresses = ExistingAddresses.OrderBy(A=>A.Name).ToList();
            PickedAddress = ExistingAddresses.First();
        }
        await base.OnInitializedAsync();
    }
    private async Task SaveAddress(Address address){
        bool Succeeded = false;

        Address Existingaddress = await _AddressService.GetByZIPAsync(address.ZipCode,address.Number);

        if(Existingaddress == null){
            Succeeded = await _AddressService.CreateAsync(address);
            if(Succeeded)
                DialogService.Close(address);
        } else {
            Existingaddress.Name = address.Name;
            Existingaddress.Number = address.Number;
            Existingaddress.Street = address.Street;
            Existingaddress.ZipCode = address.ZipCode;

            Succeeded = await _AddressService.SaveAsync(Existingaddress);
            
            if(Succeeded)
                DialogService.Close(Existingaddress);
        }
    }
    private async Task UseExisiting(){
        DialogService.Close(PickedAddress);
    }
}
