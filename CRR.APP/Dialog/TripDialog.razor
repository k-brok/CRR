@inject AddressService _AddressService
@inject CarService _CarService
@inject TripService _TripService
@inject DialogService DialogService

<RadzenTemplateForm TItem="Trip" Data=@NewTrip Submit=@OnSubmit>
    <RadzenStack Gap="10px">    
        <RadzenFieldset AllowCollapse="true" ExpandTitle="Expand Departure." CollapseTitle="Collapse Departure."
                    ExpandAriaLabel="Expand the list of Departure." CollapseAriaLabel="Collapse the list of Departure." Collapsed=true >
            <HeaderTemplate>
                <RadzenStack Orientation="Orientation.Horizontal" Gap="0.25rem">
                    <RadzenIcon Icon="account_box" /><b>Vertrek: </b>@FromTitle
                </RadzenStack>
            </HeaderTemplate>
            <ChildContent>
                <RadzenStack>
                    <RadzenRow >
                        <RadzenColumn Size="10">
                            <RadzenFormField Text="Vertrek address" Style="Width: 100%" Variant=Variant.Flat>
                                <RadzenDropDown TValue=Address Value=@NewTrip.From Change=@(args => UpdateFromAddress((Address) args)) TextProperty="@nameof(Address.Name)" Data=@AllAddresses Name="DropDownFrom" />
                                <RadzenRequiredValidator Component="DropDownFrom" Text="Een vertrek adres is verplicht" Popup=true Style="position: absolute"/>
                            </RadzenFormField>
                        </RadzenColumn>
                        <RadzenColumn Size="2">
                            <RadzenButton Click=@(() => CreateAddress(new Address(),AddressChoise.From)) Icon="add_circle" ButtonStyle="ButtonStyle.Primary" />
                        </RadzenColumn>
                    </RadzenRow>
                    
                    <RadzenFormField Text="Kilometerstand vertrek" Variant=Variant.Flat>
                        <RadzenNumeric TValue=int Value=@NewTrip.DepartureMileage Change=@(args => UpdateDepartureMileage((int) args)) Name="DepartureMileage"/>
                        <RadzenNumericRangeValidator Component="DepartureMileage" Min="1" opup=true Text="Kilometerstand moet minimaal 1km zijn!" Style="position: absolute" />
                    </RadzenFormField>
                    <RadzenFormField Text="Vertrek tijd" Variant=Variant.Flat>
                        <RadzenDatePicker TValue=DateTime Value=@NewTrip.Departure Change="@(args => UpdateDepartureTime((DateTime) args))" ShowTime="true" ShowSeconds="true" HoursStep="1" MinutesStep="5"DateFormat="dd-MM-yyyy HH:mm" Name="Vertrektijd" />
                        <RadzenRequiredValidator Component="Vertrektijd" Text="Vertrekijd is verplicht!" Popup=true Style="position: absolute"/>
                    </RadzenFormField>
                </RadzenStack>
            </ChildContent>
            <SummaryTemplate>
                <RadzenStack>
                    <RadzenFormField Text="Vertrek tijd" Variant=Variant.Flat>
                        <RadzenDatePicker TValue=DateTime Value=@NewTrip.Departure Change="@(args => UpdateDepartureTime((DateTime) args))" ShowTime="true" ShowSeconds="true" HoursStep="1" MinutesStep="5"DateFormat="dd-MM-yyyy HH:mm" Name="Vertrektijd" />
                        <RadzenRequiredValidator Component="Vertrektijd" Text="Vertrekijd is verplicht!" Popup=true Style="position: absolute"/>
                    </RadzenFormField>
                </RadzenStack>
            </SummaryTemplate>
        </RadzenFieldset>
        <RadzenFieldset AllowCollapse="false">
            <HeaderTemplate>
                <RadzenStack Orientation="Orientation.Horizontal" Gap="0.25rem">
                    <RadzenIcon Icon="account_box" /><b>Aankomst: </b>@ToTitle
                </RadzenStack>
            </HeaderTemplate>
            <ChildContent>
                <RadzenStack>
                    
                    <RadzenRow >
                        <RadzenColumn Size="10">
                            <RadzenFormField Text="Aankomst address" Style="Width: 100%" Variant=Variant.Flat>
                                <RadzenDropDown Value=@NewTrip.To Change=@(args => UpdateToAddress((Address) args)) TextProperty="@nameof(Address.Name)" Data=@AllAddresses Name="DropDownTo" />
                                <RadzenRequiredValidator Component="DropDownTo" Text="First name is required" Popup=true Style="position: absolute"/>
                            </RadzenFormField>
                        </RadzenColumn>
                        <RadzenColumn Size="2">
                            <RadzenButton Click=@(() => CreateAddress(new Address(),AddressChoise.to)) Icon="add_circle" ButtonStyle="ButtonStyle.Primary" />
                        </RadzenColumn>
                    </RadzenRow>
                    <RadzenFormField Text="Kilometerstand aankomst" Variant=Variant.Flat>
                        <RadzenNumeric TValue=int Value=@NewTrip.ArrivalMileage Name="ArrivalMileage" Change=@(args => UpdateArrivalMileage((int)args)) />
                        <RadzenNumericRangeValidator Component="ArrivalMileage" Min=@NewTrip.DepartureMileage Popup=true Text="Kilometerstand bij aankomst moet groter dan bij vertrek zijn!" Style="position: absolute" />
                    </RadzenFormField>
                    <RadzenFormField Text="Aankomst tijd" Variant=Variant.Flat>
                        <RadzenDatePicker TValue=DateTime Value=@NewTrip.Arrival Change="@(args => UpdateArrivalTime((DateTime) args))" ShowTime="true" ShowSeconds="true" HoursStep="1" MinutesStep="5"DateFormat="dd-MM-yyyy HH:mm" Name="aankomststijd" />
                        <RadzenRequiredValidator Component="aankomststijd" Text="Aankomststijd is verplicht!" Popup=true Style="position: absolute"/>
                    </RadzenFormField>
                </RadzenStack>
            </ChildContent>
        </RadzenFieldset>
        <RadzenFieldset AllowCollapse="false">
            <HeaderTemplate>
                <RadzenStack Orientation="Orientation.Horizontal" Gap="0.25rem">
                    <RadzenIcon Icon="account_box" /><b>Instellingen</b>
                </RadzenStack>
            </HeaderTemplate>
            <ChildContent>
                <RadzenStack>
                    <RadzenFormField Text="Opmerking" Variant=Variant.Flat>
                        <RadzenTextArea  @bind-Value=NewTrip.Remark />
                    </RadzenFormField>
                    <RadzenRow>
                        <RadzenColumn Size="8">
                            <RadzenFormField Text="Prive Kilometers" Variant=Variant.Flat>
                                <RadzenNumeric TValue=int Value=@PrivateMileages Disabled=@FullPrivate Style="width: 100%;" Change=@(args => UpdatePrivateMileages((int)args)) Name="PrivateMileages"/>
                                <RadzenNumericRangeValidator Visible=@(!FullPrivate) Component="PrivateMileages" Max=@(NewTrip.ArrivalMileage - NewTrip.DepartureMileage) Popup=true Text="Privekilometers mogen niet groter zijn dan de totale kilometers!" Style="position: absolute" />
                            </RadzenFormField>
                        </RadzenColumn>
                        <RadzenColumn Size="4">
                            <RadzenToggleButton @bind-Value=@FullPrivate ButtonStyle="ButtonStyle.Light" ToggleButtonStyle="ButtonStyle.Success" Text="Volledig prive" />
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenStack>
            </ChildContent>
        </RadzenFieldset>
        <RadzenButton ButtonType="ButtonType.Submit" Text="Toevoegen" Style="width: 100%;" ButtonStyle="ButtonStyle.Primary" />
    </RadzenStack>
</RadzenTemplateForm>
@code{
    private string FromTitle{get; set;}
    private string ToTitle{get; set;}
    private bool FullPrivate{get; set;} = false;
    private int PrivateMileages{get; set;}
    private Trip NewTrip {get; set;} = new Trip();
    private List<Address> AllAddresses {get; set;} = new List<Address>();
    private List<Car> AllCars {get; set;} = new List<Car>();
    protected override async Task OnInitializedAsync(){
        Trip PreviousTrip = await _TripService.GetLatestAsync();
        AllAddresses = await _AddressService.GetAllAsync();
        AllCars = await _CarService.GetAllAsync();

        Car defaulcar  = await _CarService.GetDefaultAsync();
        NewTrip.Car = defaulcar;
        NewTrip.CarId = defaulcar.Id;

        if(PreviousTrip != null){
            NewTrip.DepartureMileage = PreviousTrip.ArrivalMileage;
            NewTrip.From = await _AddressService.GetAsync(PreviousTrip.ToId);
            NewTrip.FromId = PreviousTrip.ToId;
        }

        await AutoFillValues();

        await base.OnInitializedAsync();
    }
    private async Task AutoFillValues(){
        FromTitle = "";
        ToTitle = "";
        if(NewTrip.From != null){
            FromTitle += NewTrip.From.Name;
            if(NewTrip.DepartureMileage != 0)
                FromTitle += "  (" + NewTrip.DepartureMileage.ToString() + " km)";
        }
        if(NewTrip.To != null){
            ToTitle += NewTrip.To.Name;
            if(NewTrip.ArrivalMileage != 0)
                ToTitle += "  (" + NewTrip.ArrivalMileage.ToString() + " km)";
        }

        Console.WriteLine(NewTrip.Arrival);
        if(NewTrip.Arrival == DateTime.MinValue)
            NewTrip.Arrival = DateTime.Now;

        if(NewTrip.ArrivalMileage == 0 && NewTrip.DepartureMileage != 0){
            NewTrip.ArrivalMileage = NewTrip.DepartureMileage + 9;
        }

        await Task.Delay(50);
        StateHasChanged();
    }
    private async Task UpdateFromAddress(Address address){
        NewTrip.From = address;
        await AutoFillValues();
    }
    private async Task UpdateToAddress(Address address){
        NewTrip.To = address;
        await AutoFillValues();
    }
    private async Task UpdateDepartureMileage(int DepartureMileage){
        NewTrip.DepartureMileage = DepartureMileage;
        await AutoFillValues();
    }
    private async Task UpdateArrivalMileage(int ArrivalMileage){
        NewTrip.ArrivalMileage = ArrivalMileage;
        await AutoFillValues();
    }
    private async Task UpdateDepartureTime(DateTime DepartureTime)
    {
        NewTrip.Departure = DepartureTime;
        await AutoFillValues();
    }
    private async Task UpdateArrivalTime(DateTime ArrivalTime){
        NewTrip.Arrival = ArrivalTime;
        await AutoFillValues();
    }
    private async Task UpdatePrivateMileages(int PrivateMileages){
        NewTrip.PrivateMileage = PrivateMileages;
        await AutoFillValues();
    }
    async Task OnSubmit(Trip model){
        model.FromId = model.From.Id;
        model.ToId = model.To.Id;

        if(FullPrivate){
            model.PrivateMileage = model.ArrivalMileage - model.DepartureMileage;
        } else{
            model.PrivateMileage = PrivateMileages;
        }
        await _TripService.CreateAsync(model);
        DialogService.Close();
    }
    async Task CreateAddress(Address AddressData,AddressChoise Choise)
    {
         var TripAddress = await DialogService.OpenAsync<CRR.APP.Dialog.AddressDialog>($"Address {AddressData.Name}",
               new Dictionary<string, object>() { { "AddressData", AddressData } },
               new DialogOptions() { Width = "700px", Height = "520px" });
        AllAddresses = await _AddressService.GetAllAsync();
        if(Choise == AddressChoise.From){
            NewTrip.From = AllAddresses.FirstOrDefault(A=>A.ZipCode == TripAddress.ZipCode);
            NewTrip.FromId = AllAddresses.FirstOrDefault(A=>A.ZipCode == TripAddress.ZipCode).Id;
        }
        else{
            NewTrip.To = AllAddresses.FirstOrDefault(A=>A.ZipCode == TripAddress.ZipCode);
            NewTrip.ToId = AllAddresses.FirstOrDefault(A=>A.ZipCode == TripAddress.ZipCode).Id;
        }
        StateHasChanged();
    }
    enum AddressChoise{
        From,
        to
    }
}