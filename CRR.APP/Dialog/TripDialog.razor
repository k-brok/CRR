<RadzenTemplateForm TItem="Trip" Data=@NewTrip Submit=@OnSubmit>
    <RadzenStack Gap="10px">    
        <RadzenFieldset AllowCollapse="true" ExpandTitle="Expand Departure." CollapseTitle="Collapse Departure."
                    ExpandAriaLabel="Expand the list of Departure." CollapseAriaLabel="Collapse the list of Departure." Collapsed=true >
            <HeaderTemplate>
                <RadzenStack Orientation="Orientation.Horizontal" Gap="0.25rem">
                    <RadzenIcon Icon="account_box" /><b>Vertrek</b>
                </RadzenStack>
            </HeaderTemplate>
            <ChildContent>
                <RadzenStack>
                    <RadzenFormField Text="Vertrek address"  Variant=Variant.Flat>
                        <RadzenDropDown @bind-Value=@NewTrip.From @onchange=UpdateTitles TextProperty="@nameof(Address.Name)" Data=@AllAddresses Name="DropDownFrom" />
                        <RadzenRequiredValidator Component="DropDownFrom" Text="Een vertrek adres is verplicht" Popup=true Style="position: absolute"/>
                    </RadzenFormField>
                    <RadzenFormField Text="Kilometerstand vertrek" Variant=Variant.Flat>
                        <RadzenNumeric @bind-Value=@NewTrip.DepartureMileage @onchange=@(args => UpdateTitles()) Name="DepartureMileage"/>
                        <RadzenNumericRangeValidator Component="DepartureMileage" Min="1" opup=true Text="Kilometerstand moet minimaal 1km zijn!" Style="position: absolute" />
                    </RadzenFormField>
                    <RadzenFormField Text="Vertrek tijd" Variant=Variant.Flat>
                        <RadzenDatePicker @bind-Value=@NewTrip.Departure @onchange="@(args => UpdateDepartureTime())" ShowTime="true" ShowSeconds="true" HoursStep="1" MinutesStep="5"DateFormat="dd-MM-yyyy HH:mm" Name="Vertrektijd" />
                        <RadzenRequiredValidator Component="Vertrektijd" Text="Vertrekijd is verplicht!" Popup=true Style="position: absolute"/>
                    </RadzenFormField>
                </RadzenStack>
            </ChildContent>
            <SummaryTemplate>
                <radzenstack>
                    <p>@FromTitle</p>
                    <RadzenFormField Text="Vertrek tijd" Variant=Variant.Flat>
                        <RadzenDatePicker @bind-Value=@NewTrip.Departure @onchange="@(args => UpdateDepartureTime())" ShowTime="true" ShowSeconds="true" HoursStep="1" MinutesStep="5"DateFormat="dd-MM-yyyy HH:mm" Name="Vertrektijd" />
                        <RadzenRequiredValidator Component="Vertrektijd" Text="Vertrekijd is verplicht!" Popup=true Style="position: absolute"/>
                    </RadzenFormField>
                </radzenstack>
            </SummaryTemplate>
        </RadzenFieldset>
        <RadzenFieldset AllowCollapse="false">
            <HeaderTemplate>
                <RadzenStack Orientation="Orientation.Horizontal" Gap="0.25rem">
                    <RadzenIcon Icon="account_box" /><b>Aankomst</b>
                </RadzenStack>
            </HeaderTemplate>
            <ChildContent>
                <RadzenStack>
                    <RadzenFormField Text="Aankomst address" Variant=Variant.Flat>
                        <RadzenDropDown @bind-Value=@NewTrip.To @onchange=@(args => UpdateAddressTo()) TextProperty="@nameof(Address.Name)" Data=@AllAddresses Name="DropDownTo" />
                        <RadzenRequiredValidator Component="DropDownTo" Text="First name is required" Popup=true Style="position: absolute"/>
                    </RadzenFormField>
                    <RadzenFormField Text="Kilometerstand aankomst" Variant=Variant.Flat>
                        <RadzenNumeric @bind-Value=@NewTrip.ArrivalMileage Name="ArrivalMileage" @onchange=@(args => UpdateTitles()) />
                        <RadzenNumericRangeValidator Component="ArrivalMileage" Min=@NewTrip.DepartureMileage Popup=true Text="Kilometerstand bij aankomst moet groter dan bij vertrek zijn!" Style="position: absolute" />
                    </RadzenFormField>
                    <RadzenFormField Text="Aankomst tijd" Variant=Variant.Flat>
                        <RadzenDatePicker @bind-Value=@NewTrip.Arrival ShowTime="true" ShowSeconds="true" HoursStep="1" MinutesStep="5"DateFormat="dd-MM-yyyy HH:mm" Name="aankomststijd" />
                        <RadzenRequiredValidator Component="aankomststijd" Text="Aankomststijd is verplicht!" Popup=true Style="position: absolute"/>
                    </RadzenFormField>
                </RadzenStack>
            </ChildContent>
        </RadzenFieldset>
        <RadzenFieldset AllowCollapse="false">
            <HeaderTemplate>
                <RadzenStack Orientation="Orientation.Horizontal" Gap="0.25rem">
                    <RadzenIcon Icon="account_box" /><b>Instellingen</b>
                </RadzenStack>
            </HeaderTemplate>
            <ChildContent>
                <RadzenStack>
                    <RadzenFormField Text="Opmerking" Variant=Variant.Flat>
                        <RadzenTextArea  @bind-Value=NewTrip.Remark />
                    </RadzenFormField>
                    <RadzenRow>
                        <RadzenColumn Size="8">
                            <RadzenFormField Text="Prive Kilometers" Variant=Variant.Flat>
                                <RadzenNumeric @bind-Value=@PrivateMileages Disabled=@FullPrivate Style="width: 100%;" @onchange=@(args => UpdateTitles()) Name="PrivateMileages"/>
                                <RadzenNumericRangeValidator Visible=@(!FullPrivate) Component="PrivateMileages" Max=@(NewTrip.ArrivalMileage - NewTrip.DepartureMileage) Popup=true Text="Privekilometers mogen niet groter zijn dan de totale kilometers!" Style="position: absolute" />
                            </RadzenFormField>
                        </RadzenColumn>
                        <RadzenColumn Size="4">
                            <RadzenToggleButton @bind-Value=@FullPrivate ButtonStyle="ButtonStyle.Light" ToggleButtonStyle="ButtonStyle.Success" Text="Volledig prive" />
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenStack>
            </ChildContent>
        </RadzenFieldset>
        <RadzenButton ButtonType="ButtonType.Submit" Text="Toevoegen" Style="width: 100%;" ButtonStyle="ButtonStyle.Primary" />
    </RadzenStack>
</RadzenTemplateForm>
@code{
    private string FromTitle{get; set;}
    private string ToTitle{get; set;}
    private bool FullPrivate{get; set;} = false;
    private int PrivateMileages{get; set;}
    private DateTime CurrentDepartureTime{get; set;}
    private Trip NewTrip {get; set;} = new Trip();
    private List<Address> AllAddresses {get; set;} = new List<Address>();
    protected override async Task OnInitializedAsync(){
        Trip PreviousTrip = await _TripService.GetLatestAsync();
        AllAddresses = await _AddressService.GetAllAsync();

        if(PreviousTrip != null){
            NewTrip.DepartureMileage = PreviousTrip.ArrivalMileage;
            NewTrip.From = await _AddressService.GetAsync(PreviousTrip.ToId);
            NewTrip.FromId = PreviousTrip.ToId;
        }

        CurrentDepartureTime = NewTrip.Departure;

        await UpdateTitles();

        await base.OnInitializedAsync();
    }
    private async Task UpdateTitles(){
        FromTitle = "";
        ToTitle = "";
        if(NewTrip.From != null){
            FromTitle += NewTrip.From.Name;
            if(NewTrip.DepartureMileage != null)
                FromTitle += "  (" + NewTrip.DepartureMileage.ToString() + " km)";
        }
        if(NewTrip.To != null){
            ToTitle += NewTrip.To.Name;
            if(NewTrip.ArrivalMileage != null)
                ToTitle += "  (" + NewTrip.ArrivalMileage.ToString() + " km)";
        }
        await Task.Delay(50);
        StateHasChanged();
    }

    private async Task UpdateDepartureTime()
    {
        if (NewTrip.Arrival == null)
        {
            NewTrip.Arrival = NewTrip.Departure;
        }
        else
        {
            TimeSpan difference = NewTrip.Arrival - CurrentDepartureTime;
            NewTrip.Arrival = NewTrip.Departure + difference;
        }

        NewTrip.Departure = NewTrip.Departure;
        CurrentDepartureTime = NewTrip.Departure;
    }
    private async Task UpdateAddressTo(){
        if(NewTrip.ArrivalMileage == 0 && NewTrip.DepartureMileage != 0){
            NewTrip.ArrivalMileage = NewTrip.DepartureMileage + 9;
        }

        await UpdateTitles();
    }
    void OnSubmit(Trip model){
        model.FromId = model.From.Id;
        model.ToId = model.To.Id;

        if(FullPrivate){
            model.PrivateMileage = model.ArrivalMileage - model.DepartureMileage;
        } else{
            model.PrivateMileage = PrivateMileages;
        }
        _TripService.CreateAsync(model);
    }
}